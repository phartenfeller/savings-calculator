{"version":3,"sources":["components/Header.jsx","components/LabelInput.jsx","components/Calculator.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","className","style","height","LabelInput","text","value","setter","id","replace","getIdFromText","htmlFor","type","onChange","e","eventValue","target","parseFloat","undefined","Calculator","useState","startCapital","setStartCapital","monthSavings","setMonthSavings","interestRate","setInterestRate","years","setYears","result","setResult","onClick","res","toFixed","calcResult","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAWeA,G,KATA,WACb,OACE,gCACE,yBAAKC,UAAU,gBAAgBC,MAAO,CAACC,OAAQ,SAC/C,wBAAIF,UAAU,4BAAd,yB,OCoCSG,EAnCI,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC3BC,EALc,SAAAH,GACpB,OAAOA,EAAKI,QAAQ,KAAM,KAIfC,CAAcL,GAUzB,OACE,yBAAKJ,UAAU,QACb,2BAAOA,UAAU,QAAQU,QAASH,GAChC,0BAAMP,UAAU,+BAA+BI,GAC/C,yBAAKJ,UAAU,IACb,2BACEA,UAAU,+JACVO,GAAIA,EACJI,KAAK,SACLN,MAAOA,EACPO,SAAU,SAAAC,GAAC,OAlBHC,EAkBgBD,EAAEE,OAAOV,WAhBvCC,EADEQ,EACKE,WAAWF,QAEXG,GAJM,IAACH,SCqBLI,EA5BI,WAAO,IAAD,EACiBC,mBAAS,GAD1B,mBAChBC,EADgB,KACFC,EADE,OAEiBF,mBAAS,GAF1B,mBAEhBG,EAFgB,KAEFC,EAFE,OAGiBJ,mBAAS,GAH1B,mBAGhBK,EAHgB,KAGFC,EAHE,OAIGN,mBAAS,GAJZ,mBAIhBO,EAJgB,KAITC,EAJS,OAKKR,qBALL,mBAKhBS,EALgB,KAKRC,EALQ,KAavB,OACE,0BAAM7B,UAAU,eACd,kBAAC,EAAD,CAAYI,KAAK,mBAAmBC,MAAOe,EAAcd,OAAQe,IACjE,kBAAC,EAAD,CAAYjB,KAAK,kBAAkBC,MAAOiB,EAAchB,OAAQiB,IAChE,kBAAC,EAAD,CAAYnB,KAAK,QAAQC,MAAOqB,EAAOpB,OAAQqB,IAC/C,kBAAC,EAAD,CAAYvB,KAAK,gBAAgBC,MAAOmB,EAAclB,OAAQmB,IAC9D,4BAAQd,KAAK,SAASX,UAAU,2EAA2E8B,QAAS,kBAZrG,WACjB,IACMC,IADUX,EAA+B,GAAfE,EAAoBI,GAC7BF,GAAcQ,QAAQ,GAC7CH,EAAUE,GASkHE,KAA1H,aACA,yBAAKjC,UAAU,gBACb,yCACA,0BAAMA,UAAU,kCAAkC4B,MCX3CM,EATH,WACV,OACE,yBAAKlC,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.37ab4adf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"bg-indigo-700\" style={{height: '3px'}} />\r\n      <h1 className=\"text-2xl text-indigo-700\">Savings Calculator</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst getIdFromText = text => {\r\n  return text.replace(/ /g, '-');\r\n};\r\n\r\nconst LabelInput = ({ text, value, setter }) => {\r\n  const id = getIdFromText(text);\r\n\r\n  const setValue = (eventValue) => {\r\n    if (eventValue) {\r\n      setter(parseFloat(eventValue));\r\n    } else {\r\n      setter(undefined);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-3\">\r\n      <label className=\"block\" htmlFor={id}>\r\n        <span className=\"text-gray-700 font-semibold\">{text}</span>\r\n        <div className=\"\">\r\n          <input\r\n            className=\"bg-gray-200 border-2 border-gray-200 appearance-none rounded py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-indigo-400\"\r\n            id={id}\r\n            type=\"number\"\r\n            value={value}\r\n            onChange={e => setValue(e.target.value)}\r\n          />\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nLabelInput.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  setter: PropTypes.func.isRequired\r\n};\r\n\r\nexport default LabelInput;\r\n","import React, { useState } from 'react';\r\nimport LabelInput from './LabelInput';\r\n\r\nconst Calculator = () => {\r\n  const [startCapital, setStartCapital] = useState(0);\r\n  const [monthSavings, setMonthSavings] = useState(0);\r\n  const [interestRate, setInterestRate] = useState(0);\r\n  const [years, setYears] = useState(0);\r\n  const [result, setResult] = useState();\r\n\r\n  const calcResult = () => {\r\n    const capital = startCapital + (monthSavings * 12 * years);\r\n    const res = (capital * interestRate).toFixed(2);\r\n    setResult(res);\r\n  }\r\n\r\n  return (\r\n    <form className=\"text-center\">\r\n      <LabelInput text=\"Starting Capital\" value={startCapital} setter={setStartCapital} />\r\n      <LabelInput text=\"Monthly Savings\" value={monthSavings} setter={setMonthSavings} />\r\n      <LabelInput text=\"Years\" value={years} setter={setYears} />\r\n      <LabelInput text=\"Interest Rate\" value={interestRate} setter={setInterestRate} />\r\n      <button type=\"button\" className=\"rounded bg-indigo-700 py-2 px-4 text-lg font-bold text-white shadow my-4\" onClick={() => calcResult()}>Calculate</button>\r\n      <div className=\"text-lg py-2\"> \r\n        <span>Result:</span>\r\n        <span className=\"font-bold text-indigo-900 ml-2\">{result}</span>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\nimport './css/tailwind.css';\r\nimport Header from './components/Header';\r\nimport Calculator from './components/Calculator';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App text-center\">\r\n      <Header />\r\n      <Calculator />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}